#version 140

#define EPSILON 0.000244140625

vec3 decodeNormal (vec2 encodedNormal)
{
    vec2 p = encodedNormal;
    
    // Find z sign
    float zsign = sign (1.0 - abs (p.x) - abs (p.y));
    // Map outer triangles to center if encoded z is negative
    float z_is_negative = max (-zsign, 0.0);
    vec2 p_sign = sign (p);
	p_sign = sign (p_sign + vec2 (0.5, 0.5));
	// Reflection
	// qr = q - 2 * n * (dot (q, n) - d) / dot (n, n)
	p -= z_is_negative * (dot (p, p_sign) - 1.0) * p_sign;

    // Convert square to unit circle
    // We add epsilon to avoid division by zero
    float r = abs (p.x) + abs (p.y);
    float d = length (p) + EPSILON;
    vec2 q = p * r / d;

    // Deproject unit circle to sphere
    float den = 2.0 / (dot (q, q) + 1.0);
    vec3 v = vec3(den * q, zsign * (den - 1.0));

    return v;
}

vec3
unpackAndDecodeNormal (vec4 packedNormal)
{
	vec2 n0 = packedNormal.rg * 255.0;
	vec2 n1 = packedNormal.ba;
	vec2 np = n0 + n1;
	vec2 normalEncoded = (np - vec2(127.5, 127.5)) / 127.5;
	// normal = vec3(n2.x, n2.y, sqrt (1.0 - n2.x * n2.x - n2.y * n2.y));
	return decodeNormal (normalEncoded);
}

void
decodeGBuffer (in vec4 albedoData, in vec4 normalData, in vec4 specularData, out vec3 albedo, out vec3 normal, out vec3 specular, out float ambient, out float shininess)
{
	albedo = albedoData.rgb;
	normal = unpackAndDecodeNormal (normalData);
	specular = specularData.rgb;
	ambient = albedoData.a;
	shininess = 1.0 + 128.0 * specularData.a;
}


