#version 140

#define EPSILON 0.000244140625

out vec4 normal_fragment;
out vec4 albedo_fragment;
out vec4 specular_shininess_fragment;

vec2 encodeNormal (vec3 normal)
{
    // Project normal positive hemisphere to unit circle
    // We project from point (0,0,-1) to the plane [0,(0,0,-1)]
	// den = dot (l.d, p.n)
	// t = -(dot (p.n, l.p) + p.d) / den
	vec2 p = normal.xy / (abs (normal.z) + 1.0);

    // Convert unit circle to square
    // We add epsilon to avoid division by zero
    float d = abs (p.x) + abs (p.y) + EPSILON;
    float r = length (p);
    vec2 q = p * r / d;

	// Mirror triangles to outer edge if z is negative
    float z_is_negative = max (-sign (normal.z), 0.0);
	vec2 q_sign = sign (q);
	q_sign = sign (q_sign + vec2 (0.5, 0.5));
	// Reflection
	// qr = q - 2 * n * (dot (q, n) - d) / dot (n, n)
	q -= z_is_negative * (dot (q, q_sign) - 1.0) * q_sign;

    return q;
}

void
encodeGBuffer (vec3 normal, vec3 diffuse, float ambientfactor, vec3 specular, float shininess)
{
	// Normals
	vec2 normalEncoded = encodeNormal (normal);
	// Range 0..255
	vec2 np = vec2(127.5, 127.5) + 127.5 * normalEncoded;
	vec2 n0 = floor (np) / 255.0;
	vec2 n1 = fract (np);
	normal_fragment = vec4(n0, n1);

	// Albedo + ambient factor
	albedo_fragment = vec4(diffuse, ambientfactor);

	// Specular + shininess
	specular_shininess_fragment = vec4(specular, (shininess - 1.0) / 128.0);
}

